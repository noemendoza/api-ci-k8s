# Test CircleCI/ARGOCD/Harbor/HELM/K8S
# Noe
# Test porpuses
version: 2.1

#Build Condition
build_always: &build_always
  filters:
    tags:
      only: /^v.*/
# Build only in main or in tags
build_on_main: &build_on_main
  filters:
    tags:
      only: /^v.*/
    branches:
      only: main

workflows:
  version: 2
  circleci-demo:
    jobs:
      - test_yarn_packages:
          <<: *build_always
      - build_and_push_images_prod:
          <<: *build_on_main
      - sync_chart:
          <<: *build_on_main
          requires:
            - build_and_push_images_prod
      - sync_argocd_prod:
          <<: *build_on_main
          requires:
            - build_and_push_images_prod
            - sync_chart

orbs:
  docker: circleci/docker@2.0.2


jobs:
  test_yarn_packages:
    docker:
      - image: circleci/node:10.24.1
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "package-lock.json" }}
            - dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
            - /root/.cache/Cypress
          key: dependencies-{{ checksum "package-lock.json" }}
      - run: yarn test
  build_and_push_images_prod:
    working_directory: ~/repo
    executor:
      name: docker/docker
      tag: '3.6'
    steps:

      - checkout
      - docker/install-docker-compose
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Login
          command: |
            echo "${PASS_PRIVATE_REGISTRY}" | docker login ${URL_PRIVATE_REGISTRY}  --username ${USER_PRIVATE_REGISTRY} --password-stdin 

      - run:
          name: Build Docker image TAG
          command: |
            TAG="0.1.<< pipeline.number >>"
            docker build -t $VAR_PRIVATE_REGISTRY/circleci-demo:$TAG .

      - run:
          name: Push Docker image
          command: |
            TAG="0.1.<< pipeline.number >>"
            docker push $VAR_PRIVATE_REGISTRY/circleci-demo:$TAG
  sync_chart:
    docker:
      - image: circleci/node:10.24.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install YQ
          command: |
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.20.1/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq
             yq --version

      - run:
          name: Update YML Chart.yml Dev
          command: |
            ls
            TAG=0.1.<< pipeline.number >>
            TAGHELM="0.1.<< pipeline.number >>"
            sed -i 's|^version:.*|version: '"$TAGHELM"'|g' charts/api-ci-dev/Chart.yaml
          
            yq -i '.description = "circleci-demo-'$TAG'"' charts/api-ci-dev/Chart.yaml
            yq -i '.appVersion = "'$TAG'"' charts/api-ci-dev/Chart.yaml  
            yq -i '.name = "circleci-demo"' charts/api-ci-dev/Chart.yaml

      - run:
          name: Update YML values.yml Dev
          command: |
            TAG="0.1.<< pipeline.number >>"
            yq -i '.image.tag = "'$TAG'"' charts/api-ci-dev/values.yaml
            yq -i '.nameOverride = "circleci-demo"' charts/api-ci-dev/values.yaml
            yq -i '.fullnameOverride = "circleci-demo"' charts/api-ci-dev/values.yaml
            yq -i '.ingress.hosts[0].paths[0].path =  "/"' charts/api-ci-dev/values.yaml
            yq -i '.ingress.hosts[0].paths[0].backend.serviceName =  "circleci-demo-ingress"' charts/api-ci-dev/values.yaml

   
      - run:
          name: Install Helm
          command: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
            helm version


      - run:
          name: Test Chart lint
          command: |
             cat charts/api-ci-dev/Chart.yaml
             helm lint charts/api-ci-dev/

      - run:
          name: Helm add remote repo and publish
          command: |
              
              helm repo add dircleci-demo --username ${USER_PRIVATE_REGISTRY} --password ${PASS_PRIVATE_REGISTRY} ${URL_PRIVATE_HELM}

              helm plugin install https://github.com/chartmuseum/helm-push
              helm cm-push charts/api-ci-dev/ dircleci-demo
  sync_chart:
    docker:
      - image: circleci/node:10.24.1
    working_directory: ~/repo
    steps:
      - run:
          name: Install ArgoCD-CLI
          command: |
            sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd
            argocd version 
      - run:
          name: Login ArgoCD
          command: |
            argocd login ${ARGO_URL}  --username ${ARGO_USER} --grpc-web --password "${ARGO_PWD}"

      - run:
          name: ArgoCD set new helm version
          command: |
            argocd app set circleci-demo --revision "0.1.<< pipeline.number >>""   --grpc-web

      - run:
          name: ArgoCD Sync Ne revision
          command: |
            argocd app circleci-demo --grpc-web



      # - run:
      #     name: Build using `docker-compose`
      #     command: |
      #       docker-compose build
               #yq -i '.ingress.hosts[0].paths[0].path =  "/'$TAG'(/|$)(.*)"' charts/api-ci-dev/values.yaml
            #yq -i '.ingress.hosts[0].paths[0].backend.serviceName =  "circleci-demo-ingress-'$TAG'"' charts/api-ci-dev/values.yaml
      # - run:
      #     name: Creating Network
      #     command: |
      #       docker network create proxy
      # - run:
      #     name: Up docker compose
      #     command: |
      #       docker-compose up -d
      # - run:
      #     name: Get docker name
      #     command: |
      #       docker-compose ps

      # - run:
      #     name: Start container and verify it's working
      #     command: |
      #       set -x

            
      #       docker container run --network container:repo_api_1 \
      #         docker.io/jwilder/dockerize \
      #         -wait http://localhost:3001/api/version  \
      #         -wait-retry-interval 2s \
      #         -timeout 20s  

      # - run:

      #     name: docker-compose down
      #     command: docker-compose down



  # deploy_to_server:
  #   machine:
  #     image: ubuntu-2004:202010-01
  #   steps:
  #     - run:
  #         name: Install OpenFortiVPN
  #         command: |
  #           sudo apt-get update
  #           sudo apt install openfortivpn -y
  #     - checkout
  #     - run:
  #         name: "Setting environment vars for test env"
  #         command: |
  #                   echo "export VPN_IP=${VAR_PRIVATE_VPN_IP}" >> ${BASH_ENV}
  #                   echo "export VPN_USER=${VAR_PRIVATE_VPN_USER}" >> ${BASH_ENV}
  #                   echo "export VPN_PORT=${VAR_PRIVATE_VPN_PORT}" >> ${BASH_ENV}
  #                   echo "export VPN_PASS=${VAR_PRIVATE_VPN_PASSWORD}" >> ${BASH_ENV}
  #     - run:
  #         name: Check IP before VPN connection
  #         command: |
  #           chmod +x .circleci/script.sh
  #           ./.circleci/script.sh
  #           ping -c 9 $SSH_HOSTNAME

  #     - run:
  #         name: Test ping for remote server
  #         command: |
  #           ping -c 4 $SSH_HOSTNAME
  #     - run: 
  #         name: Sync SSH keys
  #         command: |
  #           ssh-keyscan -H 10.0.13.10 >> ~/.ssh/known_hosts
  #     - run:
  #         name: RsyncProject test
  #         command: |
  #          rsync -avce ssh $SSH_USERNAME@$SSH_HOSTNAME:/home/$FIOLDER/apps/test


 
